syntax = "proto3";

package koinos.rpc.mempool;
option go_package = "github.com/koinos/koinos-proto-golang/v2/koinos/rpc/mempool";

import "koinos/options.proto";
import "koinos/mempool/mempool.proto";
import "koinos/protocol/protocol.proto";
import "koinos/rpc/rpc.proto";

message check_pending_account_resources_request {
   bytes payer = 1 [(btype) = ADDRESS];
   uint64 max_payer_rc = 2 [jstype = JS_STRING];
   uint64 rc_limit = 3 [jstype = JS_STRING];
   optional bytes block_id = 4 [(btype) = BLOCK_ID];
}

message check_pending_account_resources_response {
   bool success = 1;
}

message get_pending_transactions_request {
   uint64 limit = 1 [jstype = JS_STRING];
   optional bytes block_id = 2 [(btype) = BLOCK_ID];
}

message get_pending_transactions_response {
   repeated koinos.mempool.pending_transaction pending_transactions = 1;
}

message check_account_nonce_request {
   bytes payee = 1 [(btype) = ADDRESS];
   bytes nonce = 2;
   optional bytes block_id = 3 [(btype) = BLOCK_ID];
}

message check_account_nonce_response {
   bool success = 1;
}

message get_reserved_account_rc_request {
   bytes account = 1 [(btype) = ADDRESS];
}

message get_reserved_account_rc_response {
   uint64 rc = 1;
}

message get_pending_nonce_request {
   bytes payee = 1 [(btype) = ADDRESS];
   optional bytes block_id = 2 [(btype) = BLOCK_ID];
}

message get_pending_nonce_response {
   bytes nonce = 1;
}

message get_pending_transaction_count_request {
   bytes payee = 1 [(btype) = ADDRESS];
   optional bytes block_id = 2 [(btype) = BLOCK_ID];
}

message get_pending_transaction_count_response {
   uint64 count = 1;
}

message get_pending_transactions_by_id_request {
   repeated bytes transaction_ids = 1 [(btype) = TRANSACTION_ID];
   optional bytes block_id = 2 [(btype) = BLOCK_ID];
}

message get_pending_transactions_by_id_response {
   repeated koinos.mempool.pending_transaction pending_transactions = 1;
}

message mempool_request {
   oneof request {
      rpc.reserved_rpc reserved = 1;
      check_pending_account_resources_request check_pending_account_resources = 2;
      get_pending_transactions_request get_pending_transactions = 3;
      check_account_nonce_request check_account_nonce = 4;
      get_reserved_account_rc_request get_reserved_account_rc = 5;
      get_pending_nonce_request get_pending_nonce = 6;
      get_pending_transaction_count_request get_pending_transaction_count = 7;
      get_pending_transactions_by_id_request get_pending_transactions_by_id = 8;
   }
}

message mempool_response {
   oneof response {
      rpc.reserved_rpc reserved = 1;
      rpc.error_status error = 2;
      check_pending_account_resources_response check_pending_account_resources = 3;
      get_pending_transactions_response get_pending_transactions = 4;
      check_account_nonce_response check_account_nonce = 5;
      get_reserved_account_rc_response get_reserved_account_rc = 6;
      get_pending_nonce_response get_pending_nonce = 7;
      get_pending_transaction_count_response get_pending_transaction_count = 8;
      get_pending_transactions_by_id_response get_pending_transactions_by_id = 9;
   }
}
