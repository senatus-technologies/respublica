syntax = "proto3";

package koinos.protocol;
option go_package = "github.com/koinos/koinos-proto-golang/v2/koinos/protocol";

import "koinos/options.proto";

message object_space {
  bool system = 1;
  bytes zone = 2;
  uint32 id = 3;
}

message event {
  uint32 sequence = 1;
  bytes source = 2 [(btype) = CONTRACT_ID];
  string name = 3;
  bytes data = 4;
  repeated bytes impacted = 5 [(btype) = ADDRESS];
}

message upload_contract_operation {
  bytes contract_id = 1 [(btype) = CONTRACT_ID];
  bytes bytecode = 2;
  string abi = 3;
}

message call_contract_operation {
  bytes contract_id = 1 [(btype) = CONTRACT_ID];
  uint32 entry_point = 2;
  repeated bytes args = 3;
}

message operation {
  oneof op {
    upload_contract_operation upload_contract = 1;
    call_contract_operation call_contract = 2;
  }
}

message transaction_header {
  bytes chain_id = 1;
  uint64 rc_limit = 2 [jstype = JS_STRING];
  uint64 nonce = 3;
  bytes operation_merkle_root = 4;
  bytes payer = 5 [(btype) = ADDRESS];
  bytes payee = 6 [(btype) = ADDRESS];
}

message transaction_signature {
  bytes signer = 1 [(btype) = ADDRESS];
  bytes signature = 2;
}

message transaction {
  bytes id = 1 [(btype) = TRANSACTION_ID];
  transaction_header header = 2;
  repeated operation operations = 3;
  repeated transaction_signature signatures = 4;
}

message transaction_receipt {
  bytes id = 1 [(btype) = TRANSACTION_ID];
  bytes payer = 2 [(btype) = ADDRESS];
  bytes payee = 3 [(btype) = ADDRESS];
  uint64 rc_limit = 4 [jstype = JS_STRING];
  uint64 rc_used = 5 [jstype = JS_STRING];
  uint64 disk_storage_used = 6 [jstype = JS_STRING];
  uint64 network_bandwidth_used = 7 [jstype = JS_STRING];
  uint64 compute_bandwidth_used = 8 [jstype = JS_STRING];
  bool reverted = 9;
  repeated event events = 10;
  repeated string logs = 11;
  repeated state_delta_entry state_delta_entries = 12;
}

message block_header {
  bytes previous = 1 [(btype) = BLOCK_ID];
  uint64 height = 2 [jstype = JS_STRING];
  uint64 timestamp = 3 [jstype = JS_STRING];
  bytes previous_state_merkle_root = 4;
  bytes transaction_merkle_root = 5;
  bytes signer = 6 [(btype) = ADDRESS];
}

message block {
  bytes id = 1 [(btype) = BLOCK_ID];
  block_header header = 2;
  repeated transaction transactions = 3;
  bytes signature = 4;
}

message block_receipt {
  bytes id = 1 [(btype) = BLOCK_ID];
  uint64 height = 2 [jstype = JS_STRING];
  uint64 disk_storage_used = 3 [jstype = JS_STRING];
  uint64 network_bandwidth_used = 4 [jstype = JS_STRING];
  uint64 compute_bandwidth_used = 5 [jstype = JS_STRING];
  bytes state_merkle_root = 6;
  repeated event events = 7;
  repeated transaction_receipt transaction_receipts = 8;
  repeated string logs = 9;
  uint64 disk_storage_charged = 10 [jstype = JS_STRING];
  uint64 network_bandwidth_charged = 11 [jstype = JS_STRING];
  uint64 compute_bandwidth_charged = 12 [jstype = JS_STRING];
  repeated state_delta_entry state_delta_entries = 13;
}

message state_delta_entry {
  object_space object_space = 1;
  bytes key = 2;
  optional bytes value = 3;
}
